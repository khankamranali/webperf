{
  "name": "maxmind",
  "version": "0.4.5",
  "homepage": "https://github.com/runk/node-maxmind",
  "description": "IP lookup using Maxmind databases",
  "keywords": [
    "maxmind",
    "geo",
    "geobase",
    "geo lookup",
    "ip base",
    "geocode",
    "timezone",
    "asn"
  ],
  "author": {
    "name": "Dmitry Shirokov",
    "email": "deadrunk@gmail.com"
  },
  "contributors": [
    {
      "name": "Thomas Birke @quafzi",
      "email": "quafzi@netextreme.de"
    }
  ],
  "dependencies": {},
  "devDependencies": {
    "mocha": ">= 1.10.0",
    "jshint": ">= 2.1.3",
    "istanbul": "latest"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:runk/node-maxmind.git"
  },
  "bugs": {
    "url": "http://github.com/runk/node-maxmind/issues"
  },
  "main": "index.js",
  "engine": {
    "node": ">=0.8.0",
    "npm": "1"
  },
  "license": "MIT",
  "scripts": {
    "lint": "jshint ./lib/*.js ./lib/**/*.js ./index.js ./examples/*.js",
    "test": "mocha -R spec --recursive",
    "coverage": "istanbul cover _mocha -- -R dot --recursive",
    "benchmark": "node benchmark"
  },
  "readme": "node-maxmind [![Build Status](https://travis-ci.org/runk/node-maxmind.png)](https://travis-ci.org/runk/node-maxmind)\n========\n\nNative Javascript module for IP GEO lookup using Maxmind databases.\nUp to [500% faster](https://github.com/runk/node-maxmind#performance--benchmark) than other GEO lookup libraries.\nNo binary or whatsoever dependencies.\n\n## GEO databases\n\nFree GEO databases available for download here: http://dev.maxmind.com/geoip/geolite.\n\n\n## Installation\n\n    npm i maxmind\n\n\n## Main features\n\n - Country/Region/Location lookup by IP (v4 and v6)\n - Distance between two IP addresses (locations)\n - Timezone lookup by IP\n - Autonomous System Numbers (ASN) lookup by IP\n - Network speed lookup by IP\n\nModule written in pure Javascript with no dependencies. Being able to work with binary Maxmind databases it doesn't\nrequire any \"CSV - {specific lib format}\" conversions as other modules do. Maxmind binary databases are highly optimized\nfor size and performance so there's no point working with other than that format.\n\n## Usage\n\n** see code samples in `./examples` directory **\n\n\n```javascript\nvar maxmind = require('maxmind');\n\n// City/Location lookup\nmaxmind.init('/path/to/GeoLiteCity.dat');\nvar location = maxmind.getLocation('66.6.44.4');\n\n// Country Lookup\nmaxmind.init('/path/to/GeoIP.dat');\nvar country = maxmind.getCountry('66.6.44.4');\n\n// Autonomous System Numbers (ASN) lookup\nmaxmind.init('/path/to/GeoIPASNum.dat');\nvar org = maxmind.getAsn('66.6.44.4');\n\n// Internet Service Provider (ISP) lookup\nmaxmind.init('/path/to/GeoISP.dat');\nvar org = maxmind.getIsp('66.6.44.4');\n\n// Net Speed lookup\nmaxmind.init('/path/to/GeoIPNetSpeedCell.dat');\nvar speed = maxmind.getNetSpeed('89.66.148.0');\n\n// Organization lookup\nmaxmind.init('/path/to/GeoIPOrg.dat');\nvar org = maxmind.getOrganization('66.6.44.4');\n```\n\n## V6 Support\n\nModule is fully campatible with IPv6 maxmind databases. Make sure you initialize with\nproper IPv6 databases before making queries.\n\n```javascript\nmaxmind.init('/path/to/GeoLiteCityV6.dat');\nvar location = maxmind.getLocationV6('2001:4860:0:1001::3004:ef68');\n```\n\nAll methods works in the same way as for IPv4, the only difference is `V6` postfix in method names:\n`getCountryV6`, `getLocationV6` and `getOrganizationV6`.\n\nYou can initialize module with several databases at once, and proper db will be automatically selected\nfor particular query. If any option is given it applies to all databases you initialize.\n\n```javascript\nvar maxmind = require('maxmind');\nmaxmind.init(['/path/to/GeoLiteCity.dat', '/path/to/GeoIPASNum.dat']);\n// now both org and location lookups will work\nvar org = maxmind.getOrganization('66.6.44.4');\nvar location = maxmind.getLocation('66.6.44.4');\n```\n\n## Options\n\nBy default module does not use cache, and works directly with file system. Enabling cache\nleads to better performance though consumes more memory.\n\n- `indexCache` saves in memory the country index only\n- `memoryCache` saves in memory full database file\n- `checkForUpdates` checks databases for updates (via fs mtime). Basically once you replace the old DB file with\n  the new one module automamtically re-initialises.\n\nOptions can be passed to `init` method:\n\n```javascript\nvar maxmind = require('maxmind');\nmaxmind.init('/path/to/GeoIP.dat', {indexCache: true, checkForUpdates: true});\n```\n\n\n## Performance / Benchmark\n\nCaching significantly increases performance, refer to this camparison which was made on average\nlaptop:\n\n- default: 20,000 lookups / second\n- `indexCache`: 115,000 lookups / second\n- `memoryCache`: 270,000 lookups / second\n\n\nFollowing benchmark is made for `GeoIPCity` database. Memory caching is enabled where possible. If you believe that\nbenchmark is not realistic please post a PR and share your code :)\n\n```\nnode-maxmind  274649 op/sec\ngeoip-lite    191681 op/sec 43.28% slower\ngeoip         43483 op/sec  531.61% slower\n```\n\n\n## Contributing\n\nMake sure you run `npm i` command in the project's dir before you begin, it'll install all dev dependencies. Currently\ncode coverage is about **85%**, so new tests are essential when you add new functionality. There're several npm tasks\nwhich you can find useful:\n\n- `npm test` runs tests\n- `npm run lint` runs js linter\n- `npm run coverage` runs code coverage task and generates report\n- `npm run benchmark` runs basic benchmark\n\nOne pull request per one feature, nothing unusual.\n\n\n## References\n - Timezones http://www.maxmind.com/timezone.txt\n - Region codes http://www.maxmind.com/app/iso3166_2\n\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "_id": "maxmind@0.4.5",
  "_shasum": "b84063d550d9c9354d7bef9fae600c6a70474ca2",
  "_from": "maxmind@*",
  "_resolved": "https://registry.npmjs.org/maxmind/-/maxmind-0.4.5.tgz"
}
